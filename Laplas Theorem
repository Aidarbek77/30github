import numpy as np

def minor(matrix, row, col):
    """Returns the minor of the matrix after removing the given row and column."""
    return np.delete(np.delete(matrix, row, axis=0), col, axis=1)

def laplace_determinant(matrix):
    """Computes the determinant of a square matrix using Laplace expansion."""
    if matrix.shape[0] != matrix.shape[1]:
        raise ValueError("Matrix must be square")
    
    # Base case for 1x1 matrix
    if matrix.shape[0] == 1:
        return matrix[0, 0]
    
    # Base case for 2x2 matrix
    if matrix.shape[0] == 2:
        return matrix[0, 0] * matrix[1, 1] - matrix[0, 1] * matrix[1, 0]
    
    det = 0
    for col in range(matrix.shape[1]):
        cofactor = (-1) ** col * matrix[0, col] * laplace_determinant(minor(matrix, 0, col))
        det += cofactor
    
    return det

# Example usage:
matrix = np.array([[3, 2, -1], [2, -1, 3], [1, 5, 2]])
det = laplace_determinant(matrix)
print(f"Determinant: {det}")
