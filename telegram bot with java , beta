// Main.java
package com.example.bot;

import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
import java.util.logging.Logger;

public class Main {
    private static final Logger logger = Logger.getLogger(Main.class.getName());

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new MyTelegramBot());
            logger.info("‚úÖ Bot started successfully!");
        } catch (Exception e) {
            logger.severe("‚ùå Failed to start bot: " + e.getMessage());
        }
    }
}

// BotConfig.java
package com.example.bot;

import java.util.Properties;
import java.io.InputStream;
import java.io.IOException;

public class BotConfig {
    public static final String BOT_TOKEN;
    
    static {
        Properties properties = new Properties();
        try (InputStream input = BotConfig.class.getClassLoader().getResourceAsStream("config.properties")) {
            properties.load(input);
            BOT_TOKEN = properties.getProperty("BOT_TOKEN");
        } catch (IOException e) {
            throw new RuntimeException("‚ùå Failed to load bot configuration", e);
        }
    }
}

// MyTelegramBot.java
package com.example.bot;

import com.example.bot.handlers.*;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.util.logging.Logger;

public class MyTelegramBot extends TelegramLongPollingBot {
    private static final Logger logger = Logger.getLogger(MyTelegramBot.class.getName());

    @Override
    public String getBotToken() {
        return BotConfig.BOT_TOKEN;
    }

    @Override
    public String getBotUsername() {
        return "YourBotUsername";
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String userMessage = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            String response;
            switch (userMessage) {
                case "/start":
                    response = StartHandler.handleStart();
                    break;
                case "/–æ—Å—Ç–∞–≤–∏—Ç—å_–æ—Ç–∑—ã–≤":
                    response = ReviewHandler.handleReview();
                    break;
                default:
                    if (SurveyHandler.isSurveyCommand(userMessage)) {
                        response = SurveyHandler.handleSurvey(userMessage);
                    } else {
                        response = OtherMessages.handleOtherMessages(userMessage);
                    }
                    break;
            }
            sendMessage(chatId, response);
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            logger.severe("‚ùå Failed to send message: " + e.getMessage());
        }
    }
}

// Database.java
package com.example.bot;

import java.util.logging.Logger;

public class Database {
    private static final Logger logger = Logger.getLogger(Database.class.getName());

    public static void connect() {
        logger.info("üîó Connecting to the database... (simulation)");
    }
    
    public static void createTables() {
        logger.info("üõ†Ô∏è Database tables created (simulation)");
    }
}

// config.properties (new file to be added in the resources folder)
BOT_TOKEN=YOUR_TELEGRAM_BOT_TOKEN

