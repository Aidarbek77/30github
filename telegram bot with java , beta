package com.example.bot;

import java.sql.*;
import java.util.logging.Logger;

public class Database {
    private static final Logger logger = Logger.getLogger(Database.class.getName());
    private static final String DB_URL = "jdbc:sqlite:bot_database.db"; // SQLite database

    static {
        connect();
        createTables();
    }

    public static void connect() {
        try (Connection conn = DriverManager.getConnection(DB_URL)) {
            if (conn != null) {
                logger.info("‚úÖ Connected to SQLite database.");
            }
        } catch (SQLException e) {
            logger.severe("‚ùå Database connection failed: " + e.getMessage());
        }
    }

    public static void createTables() {
        String sql = "CREATE TABLE IF NOT EXISTS admins (" +
                     "id INTEGER PRIMARY KEY AUTOINCREMENT, " +
                     "username TEXT UNIQUE NOT NULL, " +
                     "chat_id INTEGER UNIQUE NOT NULL)";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
            logger.info("üõ†Ô∏è Admins table created.");
        } catch (SQLException e) {
            logger.severe("‚ùå Failed to create tables: " + e.getMessage());
        }
    }

    public static boolean addAdmin(String username, Long chatId) {
        String sql = "INSERT INTO admins (username, chat_id) VALUES (?, ?)";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, username);
            pstmt.setLong(2, chatId);
            pstmt.executeUpdate();
            logger.info("‚úÖ Admin added: " + username);
            return true;
        } catch (SQLException e) {
            logger.severe("‚ùå Failed to add admin: " + e.getMessage());
            return false;
        }
    }

    public static boolean removeAdmin(Long chatId) {
        String sql = "DELETE FROM admins WHERE chat_id = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            int affectedRows = pstmt.executeUpdate();
            if (affectedRows > 0) {
                logger.info("‚úÖ Admin removed.");
                return true;
            }
        } catch (SQLException e) {
            logger.severe("‚ùå Failed to remove admin: " + e.getMessage());
        }
        return false;
    }

    public static boolean isAdmin(Long chatId) {
        String sql = "SELECT * FROM admins WHERE chat_id = ?";
        try (Connection conn = DriverManager.getConnection(DB_URL);
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setLong(1, chatId);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            logger.severe("‚ùå Failed to check admin status: " + e.getMessage());
            return false;
        }
    }
}